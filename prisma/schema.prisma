datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // collections   Collection[]
  posts         Post[]
  roles         Role[]
}

model Collection {
  id      String  @id @default(cuid())
  name    String
  icon    String?
  message String?

  // owner  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  roles Role[]
  // userId String
  posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id           String     @id @default(cuid())
  type         Type
  users        User[]
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String
}

enum Type {
  OWNER
  MEMBER
}

model Post {
  id           String      @id @default(cuid())
  images       String[]
  media        Media[]
  description  String?
  source       String?
  socialUser   SocialUser? @relation(fields: [socialUserId], references: [id])
  socialUserId String?
  collection   Collection  @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id      String    @id @default(cuid())
  url     String    @unique
  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String
  type    MediaType
  caption String?
}

enum MediaType {
  IMAGE
  VIDEO
}

model SocialUser {
  id       String   @id @default(cuid())
  username String
  uid      String   @unique
  posts    Post[]
  platform Platform
}

enum Platform {
  TWITTER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
